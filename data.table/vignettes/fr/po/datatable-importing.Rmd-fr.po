#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: Elise Maigné <elise.maigne@inrae.fr>\n"
"Language-Team: \n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#: fr/datatable-importing.Rmd.tmp:block 1 (code)
msgid ""
"title: \"Importing data.table\"\n"
"date: \"`r Sys.Date()`\"\n"
"output:\n"
"  markdown::html_format\n"
"vignette: >\n"
"  %\\VignetteIndexEntry{Importing data.table}\n"
"  %\\VignetteEngine{knitr::knitr}\n"
"  \\usepackage[utf8]{inputenc}\n"
msgstr ""
"title: \"Importation dans data.table\"\n"
"date: \"`r Sys.Date()`\"\n"
"output:\n"
"  markdown::html_format\n"
"vignette: >\n"
"  %\\VignetteIndexEntry{Importation dans data.table}\n"
"  %\\VignetteEngine{knitr::knitr}\n"
"  \\usepackage[utf8]{inputenc}\n"

#: fr/datatable-importing.Rmd.tmp:block 3 (paragraph)
msgid ""
"This document is focused on using `data.table` as a dependency in other R "
"packages. If you are interested in using `data.table` C code from a non-R "
"application, or in calling its C functions directly, jump to the [last "
"section](#non-r-API) of this vignette."
msgstr ""
"Ce document se concentre sur l'utilisation de `data.table` comme dépendance "
"dans d'autres packages R. Si vous souhaitez utiliser le code C de `data."
"table` à partir d'une application non-R, ou appeler directement ses "
"fonctions C, passez à la [dernière section](#non-r-API) de cette vignette."

#: fr/datatable-importing.Rmd.tmp:block 4 (paragraph)
msgid ""
"Importing `data.table` is no different from importing other R packages. "
"This vignette is meant to answer the most common questions arising around "
"that subject; the lessons presented here can be applied to other R packages."
msgstr ""
"Importer `data.table` n'est pas différent qu'importer d'autres packages R. "
"Cette vignette a pour but de répondre aux questions les plus courantes à ce "
"sujet; les indications présentées ici peuvent être appliquées à d'autres "
"packages R."

#: fr/datatable-importing.Rmd.tmp:block 5 (header)
msgid "Why to import `data.table`"
msgstr "Pourquoi importer `data.table`"

#: fr/datatable-importing.Rmd.tmp:block 6 (paragraph)
msgid ""
"One of the biggest features of `data.table` is its concise syntax which "
"makes exploratory analysis faster and easier to write and perceive; this "
"convenience can drive package authors to use `data.table`. Another, perhaps "
"more important reason is high performance. When outsourcing heavy computing "
"tasks from your package to `data.table`, you usually get top performance "
"without needing to re-invent any of these numerical optimization tricks on "
"your own."
msgstr ""
"L'une des principales caractéristiques de `data.table` est sa syntaxe "
"concise qui rend l'analyse exploratoire plus rapide et plus facile à écrire "
"et à percevoir ; cette commodité peut pousser les auteurs de package à "
"utiliser `data.table`. Une autre raison, peut-être plus importante, est la "
"haute performance. Lorsque vous confiez des tâches de calcul lourdes de "
"votre package à `data.table`, vous obtenez généralement de très bonnes "
"performances sans avoir besoin de réinventer vous-même ces astuces "
"d'optimisation numérique."

#: fr/datatable-importing.Rmd.tmp:block 7 (header)
msgid "Importing `data.table` is easy"
msgstr "Importer `data.table` est facile"

#: fr/datatable-importing.Rmd.tmp:block 8 (paragraph)
msgid ""
"It is very easy to use `data.table` as a dependency due to the fact that "
"`data.table` does not have any of its own dependencies. This applies both "
"to operating system and to R dependencies. It means that if you have R "
"installed on your machine, it already has everything needed to install "
"`data.table`. It also means that adding `data.table` as a dependency of "
"your package will not result in a chain of other recursive dependencies to "
"install, making it very convenient for offline installation."
msgstr ""
"Il est très facile d'utiliser `data.table` comme dépendance car `data."
"table` n'a pas de dépendances propres. Ceci s'applique à la fois au système "
"d'exploitation et aux dépendances de R. Cela signifie que si R est installé "
"sur votre machine, il a déjà tout ce qu'il faut pour installer `data."
"table`. Cela signifie aussi qu'ajouter `data.table` comme dépendance de "
"votre package n'entraînera pas une chaîne d'autres dépendances récursives à "
"installer, ce qui le rend très pratique pour une installation hors ligne."

#: fr/datatable-importing.Rmd.tmp:block 9 (header)
msgid "`DESCRIPTION` file {DESCRIPTION}"
msgstr "fichier `DESCRIPTION` {#DESCRIPTION}"

#: fr/datatable-importing.Rmd.tmp:block 10 (paragraph)
msgid ""
"The first place to define a dependency in a package is the `DESCRIPTION` "
"file. Most commonly, you will need to add `data.table` under the `Imports:` "
"field. Doing so will necessitate an installation of `data.table` before "
"your package can compile/install. As mentioned above, no other packages "
"will be installed because `data.table` does not have any dependencies of "
"its own. You can also specify the minimal required version of a dependency; "
"for example, if your package is using the `fwrite` function, which was "
"introduced in `data.table` in version 1.9.8, you should incorporate this as "
"`Imports: data.table (>= 1.9.8)`. This way you can ensure that the version "
"of `data.table` installed is 1.9.8 or later before your users will be able "
"to install your package. Besides the `Imports:` field, you can also use "
"`Depends: data.table` but we strongly discourage this approach (and may "
"disallow it in future) because this loads `data.table` into your user's "
"workspace; i.e. it enables `data.table` functionality in your user's "
"scripts without them requesting that. `Imports:` is the proper way to use "
"`data.table` within your package without inflicting `data.table` on your "
"user. In fact, we hope the `Depends:` field is eventually deprecated in R "
"since this is true for all packages."
msgstr ""
"Le premier endroit pour définir une dépendance dans un package est le "
"fichier `DESCRIPTION`. Le plus souvent, vous devrez ajouter `data.table` "
"dans le champ `Imports:`. Cela nécessitera l'installation de `data.table` "
"avant que votre package ne puisse être compilé/installé. Comme mentionné ci-"
"dessus, aucun autre package ne sera installé car `data.table` n'a pas de "
"dépendances propres. Vous pouvez aussi spécifier la version minimale "
"requise d'une dépendance ; par exemple, si votre package utilise la "
"fonction `fwrite`, qui a été introduite dans `data.table` dans la version "
"1.9.8, vous devriez l'incorporer comme `Imports: data.table (>= 1.9.8)`. De "
"cette façon, vous pouvez vous assurer que la version de `data.table` "
"installée est 1.9.8 ou plus récente avant que vos utilisateurs ne puissent "
"installer votre paquet. En plus du champ `Imports:`, vous pouvez aussi "
"utiliser `Depends: data.table` mais nous décourageons fortement cette "
"approche (et nous pourrions l'interdire dans le futur) parce que cela "
"charge `data.table` dans l'espace de travail de votre utilisateur ; i.e. "
"cela active la fonctionnalité `data.table` dans les scripts de votre "
"utilisateur sans qu'il ne le demande. `Imports:` est la bonne façon "
"d'utiliser `data.table` dans votre paquet sans infliger `data.table` à "
"votre utilisateur. En fait, nous espérons que le champ `Depends:` sera un "
"jour déprécié dans R car ceci est vrai pour tous les paquets."

#: fr/datatable-importing.Rmd.tmp:block 11 (header)
msgid "`NAMESPACE` file {NAMESPACE}"
msgstr "fichier `NAMESPACE` {#NAMESPACE}"

#: fr/datatable-importing.Rmd.tmp:block 12 (paragraph)
msgid ""
"The next thing is to define what content of `data.table` your package is "
"using. This needs to be done in the `NAMESPACE` file. Most commonly, "
"package authors will want to use `import(data.table)` which will import all "
"exported (i.e., listed in `data.table`'s own `NAMESPACE` file) functions "
"from `data.table`."
msgstr ""
"La prochaine chose à faire est de définir le contenu de `data.table` que "
"votre package utilise. Cela doit être fait dans le fichier `NAMESPACE`. Le "
"plus souvent, les auteurs de package voudront utiliser `import(data.table)` "
"qui importera toutes les fonctions exportées (c'est-à-dire listées dans le "
"fichier `NAMESPACE` de `data.table`) de `data.table`."

#: fr/datatable-importing.Rmd.tmp:block 13 (paragraph)
msgid ""
"You may also want to use just a subset of `data.table` functions; for "
"example, some packages may simply make use of `data.table`'s high-"
"performance CSV reader and writer, for which you can add `importFrom(data."
"table, fread, fwrite)` in your `NAMESPACE` file. It is also possible to "
"import all functions from a package *excluding* particular ones using "
"`import(data.table, except=c(fread, fwrite))`."
msgstr ""
"Vous pouvez aussi ne vouloir utiliser qu'un sous-ensemble des fonctions de "
"`data.table` ; par exemple, certains packages peuvent simplement utiliser "
"les fonctions d'écriture et lecture CSV haute performance de `data.table`, "
"pour lesquelles vous pouvez ajouter `importFrom(data.table, fread, fwrite)` "
"dans votre fichier `NAMESPACE`. Il est également possible d'importer toutes "
"les fonctions d'un package *en excluant* certaines d'entre elles en "
"utilisant `import(data.table, except=c(fread, fwrite))`."

#: fr/datatable-importing.Rmd.tmp:block 14 (paragraph)
msgid ""
"Be sure to read also the note about non-standard evaluation in `data.table` "
"in [the section on \"undefined globals\"](#globals)"
msgstr ""
"Assurez-vous de lire également la note sur l'évaluation non standard dans "
"`data.table` dans [la section sur les \"globales non définies\"](#globals)"

#: fr/datatable-importing.Rmd.tmp:block 15 (header)
msgid "Usage"
msgstr "Utilisation"

#: fr/datatable-importing.Rmd.tmp:block 16 (paragraph)
msgid ""
"As an example we will define two functions in `a.pkg` package that uses "
"`data.table`. One function, `gen`, will generate a simple `data.table`; "
"another, `aggr`, will do a simple aggregation of it."
msgstr ""
"A titre d'exemple, nous allons définir deux fonctions dans le package `a."
"pkg` qui utilise `data.table`. Une fonction, `gen`, générera un simple "
"`data.table` ; une autre, `aggr`, en fera une simple agrégation."

#: fr/datatable-importing.Rmd.tmp:block 17 (code)
msgid ""
"gen = function (n = 100L) {\n"
"  dt = as.data.table(list(id = seq_len(n)))\n"
"  dt[, grp := ((id - 1) %% 26) + 1\n"
"     ][, grp := letters[grp]\n"
"       ][]\n"
"}\n"
"aggr = function (x) {\n"
"  stopifnot(\n"
"    is.data.table(x),\n"
"    \"grp\" %in% names(x)\n"
"  )\n"
"  x[, .N, by = grp]\n"
"}\n"
msgstr ""
"gen = function (n = 100L) {\n"
"  dt = as.data.table(list(id = seq_len(n)))\n"
"  dt[, grp := ((id - 1) %% 26) + 1\n"
"     ][, grp := letters[grp]\n"
"       ][]\n"
"}\n"
"aggr = function (x) {\n"
"  stopifnot(\n"
"    is.data.table(x),\n"
"    \"grp\" %in% names(x)\n"
"  )\n"
"  x[, .N, by = grp]\n"
"}\n"

#: fr/datatable-importing.Rmd.tmp:block 18 (header)
msgid "Testing"
msgstr "Tests"

#: fr/datatable-importing.Rmd.tmp:block 19 (paragraph)
msgid ""
"Be sure to include tests in your package. Before each major release of "
"`data.table`, we check reverse dependencies. This means that if any changes "
"in `data.table` would break your code, we will be able to spot breaking "
"changes and inform you before releasing the new version. This of course "
"assumes you will publish your package to CRAN or Bioconductor. The most "
"basic test can be a plaintext R script in your package directory `tests/"
"test.R`:"
msgstr ""
"Assurez-vous d'inclure des tests dans votre package. Avant chaque version "
"majeure de `data.table`, nous vérifions les dépendances inverses. Cela "
"signifie que si un changement dans `data.table` casse votre code, nous "
"serons capables de repérer les changements et de vous en informer avant de "
"publier la nouvelle version. Cela suppose bien sûr que vous publiiez votre "
"package sur CRAN ou Bioconductor. Le test le plus basique peut être un "
"script R en clair dans le répertoire `tests/test.R` de votre package :"

#: fr/datatable-importing.Rmd.tmp:block 20 (code)
msgid ""
"library(a.pkg)\n"
"dt = gen()\n"
"stopifnot(nrow(dt) == 100)\n"
"dt2 = aggr(dt)\n"
"stopifnot(nrow(dt2) < 100)\n"
msgstr ""
"library(a.pkg)\n"
"dt = gen()\n"
"stopifnot(nrow(dt) == 100)\n"
"dt2 = aggr(dt)\n"
"stopifnot(nrow(dt2) < 100)\n"

#: fr/datatable-importing.Rmd.tmp:block 21 (paragraph)
msgid ""
"When testing your package, you may want to use `R CMD check --no-stop-on-"
"test-error`, which will continue after an error and run all your tests (as "
"opposed to stopping on the first line of script that failed) NB this "
"requires R 3.4.0 or greater."
msgstr ""
"Lorsque vous testez votre package, vous pouvez utiliser `R CMD check --no-"
"stop-on-test-error`, qui continuera après une erreur et exécutera tous vos "
"tests (au lieu de s'arrêter à la première ligne de script qui a échoué) NB "
"ceci nécessite R 3.4.0 ou plus."

#: fr/datatable-importing.Rmd.tmp:block 22 (header)
msgid "Testing using `testthat`"
msgstr "Tester en utilisant `testthat`"

#: fr/datatable-importing.Rmd.tmp:block 23 (paragraph)
msgid ""
"It is very common to use the `testthat` package for purpose of tests. "
"Testing a package that imports `data.table` is no different from testing "
"other packages. An example test script `tests/testthat/test-pkg.R`:"
msgstr ""
"Il est très courant d'utiliser le package `testthat` pour effectuer des "
"tests. Tester un paquet qui importe `data.table` n'est pas différent de "
"tester d'autres paquets. Un exemple de script de test `tests/testthat/test-"
"pkg.R` :"

#: fr/datatable-importing.Rmd.tmp:block 24 (code)
msgid ""
"context(\"pkg tests\")\n"
"\n"
"test_that(\"generate dt\", { expect_true(nrow(gen()) == 100) })\n"
"test_that(\"aggregate dt\", { expect_true(nrow(aggr(gen())) < 100) })\n"
msgstr ""
"context(\"pkg tests\")\n"
"\n"
"test_that(\"generate dt\", { expect_true(nrow(gen()) == 100) })\n"
"test_that(\"aggregate dt\", { expect_true(nrow(aggr(gen())) < 100) })\n"

#: fr/datatable-importing.Rmd.tmp:block 25 (paragraph)
msgid ""
"If `data.table` is in Suggests (but not Imports) then you need to declare `."
"datatable.aware=TRUE` in one of the R/* files to avoid \"object not found\" "
"errors when testing via `testthat::test_package` or `testthat::test_check`."
msgstr ""
"Si `data.table` est dans Suggests (mais pas dans Imports) alors vous devez "
"déclarer `.datatable.aware=TRUE` dans un des fichiers R/* pour éviter les "
"erreurs \"object not found\" lors des tests via `testthat::test_package` ou "
"`testthat::test_check`."

#: fr/datatable-importing.Rmd.tmp:block 26 (header)
msgid "Dealing with \"undefined global functions or variables\" {#globals}"
msgstr ""
"Traitement des \"fonctions ou variables globales indéfinies\" (\"undefined "
"global functions or variables\") {#globals}"

#: fr/datatable-importing.Rmd.tmp:block 27 (paragraph)
msgid ""
"`data.table`'s use of R's deferred evaluation (especially on the left-hand "
"side of `:=`) is not well-recognised by `R CMD check`. This results in "
"`NOTE`s like the following during package check:"
msgstr ""
"l'utilisation par `data.table` de l'évaluation différée de R (en "
"particulier sur le côté gauche de `:=`) n'est pas bien reconnue par `R CMD "
"check`. Il en résulte des `NOTE`s comme la suivante lors de la vérification "
"du package :"

#: fr/datatable-importing.Rmd.tmp:block 28 (code)
msgid ""
"=====* checking R code for possible problems ... NOTE=====\n"
"aggr: no visible binding for global variable 'grp'\n"
"gen: no visible binding for global variable 'grp'\n"
"gen: no visible binding for global variable 'id'\n"
"Undefined global functions or variables:\n"
"grp id\n"
msgstr ""
"=====* checking R code for possible problems ... NOTE=====\n"
"aggr: no visible binding for global variable 'grp'\n"
"gen: no visible binding for global variable 'grp'\n"
"gen: no visible binding for global variable 'id'\n"
"Undefined global functions or variables:\n"
"grp id\n"

#: fr/datatable-importing.Rmd.tmp:block 29 (paragraph)
msgid ""
"The easiest way to deal with this is to pre-define those variables within "
"your package and set them to `NULL`, optionally adding a comment (as is "
"done in the refined version of `gen` below). When possible, you could also "
"use a character vector instead of symbols (as in `aggr` below):"
msgstr ""
"La façon la plus simple de gérer cela est de prédéfinir ces variables dans "
"votre package et de leur donner la valeur `NULL`, en ajoutant "
"éventuellement un commentaire (comme c'est le cas dans la version raffinée "
"de `gen` ci-dessous). Quand c'est possible, vous pouvez aussi utiliser un "
"vecteur de caractères à la place des symboles (comme dans `aggr` ci-"
"dessous) :"

#: fr/datatable-importing.Rmd.tmp:block 30 (code)
msgid ""
"gen = function (n = 100L) {\n"
"  id = grp = NULL # due to NSE notes in R CMD check\n"
"  dt = as.data.table(list(id = seq_len(n)))\n"
"  dt[, grp := ((id - 1) %% 26) + 1\n"
"     ][, grp := letters[grp]\n"
"       ][]\n"
"}\n"
"aggr = function (x) {\n"
"  stopifnot(\n"
"    is.data.table(x),\n"
"    \"grp\" %in% names(x)\n"
"  )\n"
"  x[, .N, by = \"grp\"]\n"
"}\n"
msgstr ""
"gen = function (n = 100L) {\n"
"  id = grp = NULL # en raison des notes NSE dans la vérification CMD R\n"
"  dt = as.data.table(list(id = seq_len(n)))\n"
"  dt[, grp := ((id - 1) %% 26) + 1\n"
"     ][, grp := letters[grp]\n"
"       ][]\n"
"}\n"
"aggr = function (x) {\n"
"  stopifnot(\n"
"    is.data.table(x),\n"
"    \"grp\" %in% names(x)\n"
"  )\n"
"  x[, .N, by = \"grp\"]\n"
"}\n"

#: fr/datatable-importing.Rmd.tmp:block 31 (paragraph)
msgid ""
"The case for `data.table`'s special symbols (e.g. `.SD` and `.N`) and "
"assignment operator (`:=`) is slightly different (see `?.N` for more, "
"including a complete listing of such symbols). You should import whichever "
"of these values you use from `data.table`'s namespace to protect against "
"any issues arising from the unlikely scenario that we change the exported "
"value of these in the future, e.g. if you want to use `.N`, `.I`, and `:=`, "
"a minimal `NAMESPACE` would have:"
msgstr ""
"Le cas des symboles spéciaux de `data.table` (par exemple `.SD` et `.N`) et "
"de l'opérateur d'affectation (`:=`) est légèrement différent (voir ` ?.N` "
"pour plus d'informations, y compris une liste complète de ces symboles). "
"Vous devriez importer n'importe laquelle de ces valeurs que vous utilisez "
"de l'espace de noms de `data.table` pour vous protéger contre tout problème "
"provenant du scénario improbable où nous changerions la valeur exportée de "
"ces valeurs dans le futur, par exemple, si vous voulez utiliser `.N`, `.I`, "
"et `:=`, un `NAMESPACE` minimal devrait avoir :"

#: fr/datatable-importing.Rmd.tmp:block 32 (code)
msgid "importFrom(data.table, .N, .I, ':=')\n"
msgstr "importFrom(data.table, .N, .I, ':=')\n"

#: fr/datatable-importing.Rmd.tmp:block 33 (paragraph)
msgid ""
"Much simpler is to just use `import(data.table)` which will greedily allow "
"usage in your package's code of any object exported from `data.table`."
msgstr ""
"Il est beaucoup plus simple d'utiliser `import(data.table)` qui autorisera "
"avidement l'utilisation dans le code de votre package de tout objet exporté "
"de `data.table`."

#: fr/datatable-importing.Rmd.tmp:block 34 (paragraph)
msgid ""
"If you don't mind having `id` and `grp` registered as variables globally in "
"your package namespace you can use `?globalVariables`. Be aware that these "
"notes do not have any impact on the code or its functionality; if you are "
"not going to publish your package, you may simply choose to ignore them."
msgstr ""
"Si cela ne vous dérange pas d'avoir `id` et `grp` enregistrés comme "
"variables globalement dans l'espace de noms de votre package, vous pouvez "
"utiliser `?globalVariables`. Soyez conscient que ces notes n'ont aucun "
"impact sur le code ou ses fonctionnalités ; si vous n'avez pas l'intention "
"de publier votre paquet, vous pouvez simplement choisir de les ignorer."

#: fr/datatable-importing.Rmd.tmp:block 35 (header)
msgid "Care needed when providing and using options"
msgstr ""
"Précautions à prendre lors de la fourniture et de l'utilisation des options"

#: fr/datatable-importing.Rmd.tmp:block 36 (paragraph)
msgid ""
"Common practice by R packages is to provide customization options set by "
"`options(name=val)` and fetched using `getOption(\"name\", default)`. "
"Function arguments often specify a call to `getOption()` so that the user "
"knows (from `?fun` or `args(fun)`) the name of the option controlling the "
"default for that parameter; e.g. `fun(..., verbose=getOption(\"datatable."
"verbose\", FALSE))`. All `data.table` options start with `datatable.` so as "
"to not conflict with options in other packages. A user simply calls "
"`options(datatable.verbose=TRUE)` to turn on verbosity. This affects all "
"data.table function calls unless `verbose=FALSE` is provided explicitly; e."
"g. `fun(..., verbose=FALSE)`."
msgstr ""
"La pratique courante des packages R est de fournir des options de "
"personnalisation définies par `options(name=val)` et récupérées en "
"utilisant `getOption(\"name\", default)`. Les arguments des fonctions "
"spécifient souvent un appel à `getOption()` pour que l'utilisateur "
"connaisse (grâce à `?fun` ou `args(fun)`) le nom de l'option contrôlant la "
"valeur par défaut de ce paramètre ; par exemple `fun(..., "
"verbose=getOption(\"datatable.verbose\", FALSE))`. Toutes les options de "
"`data.table` commencent par `datatable.` afin de ne pas entrer en conflit "
"avec les options d'autres packages. Un utilisateur appelle simplement "
"`options(datatable.verbose=TRUE)` pour activer la verbosité. Cela affecte "
"tous les appels de fonctions de data.table à moins que `verbose=FALSE` ne "
"soit fourni explicitement ; par exemple `fun(..., verbose=FALSE)`."

#: fr/datatable-importing.Rmd.tmp:block 37 (paragraph)
msgid ""
"The option mechanism in R is *global*. Meaning that if a user sets a `data."
"table` option for their own use, that setting also affects code inside any "
"package that is using `data.table` too. For an option like `datatable."
"verbose`, this is exactly the desired behavior since the desire is to trace "
"and log all `data.table` operations from wherever they originate; turning "
"on verbosity does not affect the results. Another unique-to-R and excellent-"
"for-production option is R's `options(warn=2)` which turns all warnings "
"into errors. Again, the desire is to affect any warning in any package so "
"as to not miss any warnings in production. There are 6 `datatable.print.*` "
"options and 3 optimization options which do not affect the result of "
"operations. However, there is one `data.table` option that does and is now "
"a concern: `datatable.nomatch`. This option changes the default join from "
"outer to inner. [Aside, the default join is outer because outer is safer; "
"it doesn't drop missing data silently; moreover it is consistent to base R "
"way of matching by names and indices.] Some users prefer inner join to be "
"the default and we provided this option for them. However, a user setting "
"this option can unintentionally change the behavior of joins inside "
"packages that use `data.table`. Accordingly, in v1.12.4 (Oct 2019) a "
"message was printed when the `datatable.nomatch` option was used, and from "
"v1.14.2 it is now ignored with warning. It was the only `data.table` option "
"with this concern."
msgstr ""
"Le mécanisme des options dans R est *global*. Cela signifie que si un "
"utilisateur définit une option `data.table` pour son propre usage, ce "
"réglage affecte également le code de tout package qui utilise `data.table`. "
"Pour une option comme `datable.verbose`, c'est exactement le comportement "
"désiré puisque le but est de tracer et d'enregistrer toutes les opérations "
"de `data.table` d'où qu'elles viennent ; activer la verbosité n'affecte pas "
"les résultats. Une autre option unique à R et excellente pour la production "
"est `options(warn=2)` qui transforme tous les avertissements en erreurs. "
"Encore une fois, le but est d'affecter n'importe quel avertissement dans "
"n'importe quel package afin de ne manquer aucun avertissement en "
"production. Il y a 6 options `datable.print.*` et 3 options d'optimisation "
"qui n'affectent pas le résultat des opérations. Cependant, il y a une "
"option `data.table` qui l'affecte et qui est maintenant un problème : "
"`datatable.nomatch`. Cette option change la jointure par défaut d'externe à "
"interne. [A côté de cela, la jointure par défaut est externe parce que "
"outer est plus sûr ; il ne laisse pas tomber les données manquantes "
"silencieusement ; de plus, il est cohérent avec la façon dont la base R "
"fait correspondre les noms et les indices]. Certains utilisateurs préfèrent "
"que la jointure interne soit la valeur par défaut et nous avons prévu cette "
"option pour eux. Cependant, un utilisateur qui met en place cette option "
"peut involontairement changer le comportement des jointures à l'intérieur "
"des packages qui utilisent `data.table`. En conséquence, dans la version "
"1.12.4 (Oct 2019), un message était affiché lorsque l'option `datable."
"nomatch` était utilisée, et à partir de la version 1.14.2, elle est "
"maintenant ignorée avec un avertissement. C'était la seule option `datable."
"table` qui posait ce problème."

#: fr/datatable-importing.Rmd.tmp:block 38 (header)
msgid "Troubleshooting"
msgstr "Dépannage"

#: fr/datatable-importing.Rmd.tmp:block 39 (paragraph)
msgid ""
"If you face any problems in creating a package that uses data.table, please "
"confirm that the problem is reproducible in a clean R session using the R "
"console: `R CMD check package.name`."
msgstr ""
"Si vous rencontrez des problèmes lors de la création d'un package qui "
"utilise data.table, veuillez confirmer que le problème est reproductible "
"dans une session R propre en utilisant la console R : `R CMD check nom."
"package`."

#: fr/datatable-importing.Rmd.tmp:block 40 (paragraph)
msgid ""
"Some of the most common issues developers are facing are usually related to "
"helper tools that are meant to automate some package development tasks, for "
"example, using `roxygen` to generate your `NAMESPACE` file from metadata in "
"the R code files. Others are related to helpers that build and check the "
"package. Unfortunately, these helpers sometimes have unintended/hidden side "
"effects which can obscure the source of your troubles. As such, be sure to "
"double check using R console (run R on the command line) and ensure the "
"import is defined in the `DESCRIPTION` and `NAMESPACE` files following the "
"[instructions](#DESCRIPTION) [above](#NAMESPACE)."
msgstr ""
"Certains des problèmes les plus courants auxquels les développeurs sont "
"confrontés sont généralement liés à des outils d'aide destinés à "
"automatiser certaines tâches de développement de package, par exemple, "
"l'utilisation de `roxygen` pour générer votre fichier `NAMESPACE` à partir "
"des métadonnées des fichiers de code R. D'autres sont liés aux outils "
"d'aide qui construisent et vérifient les package. D'autres sont liées aux "
"aides qui construisent et vérifient le package. Malheureusement, ces aides "
"ont parfois des effets secondaires inattendus/cachés qui peuvent masquer la "
"source de vos problèmes. Ainsi, assurez-vous de faire une double "
"vérification en utilisant la console R (lancez R sur la ligne de commande) "
"et assurez-vous que l'importation est définie dans les fichiers "
"`DESCRIPTION` et `NAMESPACE` en suivant les [instructions](#DESCRIPTION) "
"[ci-dessus](#NAMESPACE)."

#: fr/datatable-importing.Rmd.tmp:block 41 (paragraph)
msgid ""
"If you are not able to reproduce problems you have using the plain R "
"console build and check, you may try to get some support based on past "
"issues we've encountered with `data.table` interacting with helper tools: "
"[devtools#192](https://github.com/r-lib/devtools/issues/192) or "
"[devtools#1472](https://github.com/r-lib/devtools/issues/1472)."
msgstr ""
"Si vous n'êtes pas en mesure de reproduire les problèmes que vous "
"rencontrez en utilisant la simple console R pour construire (\"build\") et "
"vérifier (\"check\"), vous pouvez essayer d'obtenir de l'aide en vous "
"basant sur les problèmes que nous avons rencontrés dans le passé avec `data."
"table` interagissant avec des outils d'aide : [devtools#192](https://github."
"com/r-lib/devtools/issues/192) ou [devtools#1472](https://github.com/r-lib/"
"devtools/issues/1472)."

#: fr/datatable-importing.Rmd.tmp:block 42 (header)
msgid "License"
msgstr "Licence"

#: fr/datatable-importing.Rmd.tmp:block 43 (paragraph)
msgid ""
"Since version 1.10.5 `data.table` is licensed as Mozilla Public License "
"(MPL). The reasons for the change from GPL should be read in full [here]"
"(https://github.com/Rdatatable/data.table/pull/2456) and you can read more "
"about MPL on Wikipedia [here](https://en.wikipedia.org/wiki/"
"Mozilla_Public_License) and [here](https://en.wikipedia.org/wiki/"
"Comparison_of_free_and_open-source_software_licenses)."
msgstr ""
"Depuis la version 1.10.5, `data.table` est sous licence Mozilla Public "
"License (MPL). Les raisons du changement de la GPL peuvent être lues en "
"entier [ici](https://github.com/Rdatatable/data.table/pull/2456) et vous "
"pouvez en savoir plus sur la MPL sur Wikipedia [ici](https://en.wikipedia."
"org/wiki/Mozilla_Public_License) et [ici](https://en.wikipedia.org/wiki/"
"Comparison_of_free_and_open-source_software_licenses)."

#: fr/datatable-importing.Rmd.tmp:block 44 (header)
msgid "Optionally import `data.table`: Suggests"
msgstr "Importe optionnellement `data.table` : `Suggests`"

#: fr/datatable-importing.Rmd.tmp:block 45 (paragraph)
msgid ""
"If you want to use `data.table` conditionally, i.e., only when it is "
"installed, you should use `Suggests: data.table` in your `DESCRIPTION` file "
"instead of using `Imports: data.table`. By default this definition will not "
"force installation of `data.table` when installing your package. This also "
"requires you to conditionally use `data.table` in your package code which "
"should be done using the `?requireNamespace` function. The below example "
"demonstrates conditional use of `data.table`'s fast CSV writer `?fwrite`. "
"If the `data.table` package is not installed, the much-slower base R `?"
"write.table` function is used instead."
msgstr ""
"Si vous voulez utiliser `data.table` de manière conditionnelle, c'est-à-"
"dire seulement quand il est installé, vous devriez utiliser `Suggests: data."
"table` dans votre fichier `DESCRIPTION` au lieu d'utiliser `Imports: data."
"table`. Par défaut, cette définition ne forcera pas l'installation de `data."
"table` lors de l'installation de votre package. Cela vous oblige aussi à "
"utiliser conditionnellement `data.table` dans le code de votre paquet, ce "
"qui doit être fait en utilisant la fonction `?requireNamespace`. L'exemple "
"ci-dessous démontre l'utilisation conditionnelle de la fonction d'écriture "
"de CSV rapide de `?fwrite` du package `data.table`. Si le paquet `data."
"table` n'est pas installé, la fonction de base R `?write.table`, beaucoup "
"plus lente, est utilisée à la place."

#: fr/datatable-importing.Rmd.tmp:block 46 (code)
msgid ""
"my.write = function (x) {\n"
"  if(requireNamespace(\"data.table\", quietly=TRUE)) {\n"
"    data.table::fwrite(x, \"data.csv\")\n"
"  } else {\n"
"    write.table(x, \"data.csv\")\n"
"  }\n"
"}\n"
msgstr ""
"my.write = function (x) {\n"
"  if(requireNamespace(\"data.table\", quietly=TRUE)) {\n"
"    data.table::fwrite(x, \"data.csv\")\n"
"  } else {\n"
"    write.table(x, \"data.csv\")\n"
"  }\n"
"}\n"

#: fr/datatable-importing.Rmd.tmp:block 47 (paragraph)
msgid ""
"A slightly more extended version of this would also ensure that the "
"installed version of `data.table` is recent enough to have the `fwrite` "
"function available:"
msgstr ""
"Une version légèrement plus étendue de cette méthode permettrait également "
"de s'assurer que la version installée de `data.table` est suffisamment "
"récente pour que la fonction `fwrite` soit disponible :"

#: fr/datatable-importing.Rmd.tmp:block 48 (code)
msgid ""
"my.write = function (x) {\n"
"  if(requireNamespace(\"data.table\", quietly=TRUE) &&\n"
"    utils::packageVersion(\"data.table\") >= \"1.9.8\") {\n"
"    data.table::fwrite(x, \"data.csv\")\n"
"  } else {\n"
"    write.table(x, \"data.csv\")\n"
"  }\n"
"}\n"
msgstr ""
"my.write = function (x) {\n"
"  if(requireNamespace(\"data.table\", quietly=TRUE) &&\n"
"    utils::packageVersion(\"data.table\") >= \"1.9.8\") {\n"
"    data.table::fwrite(x, \"data.csv\")\n"
"  } else {\n"
"    write.table(x, \"data.csv\")\n"
"  }\n"
"}\n"

#: fr/datatable-importing.Rmd.tmp:block 49 (paragraph)
msgid ""
"When using a package as a suggested dependency, you should not `import` it "
"in the `NAMESPACE` file. Just mention it in the `DESCRIPTION` file. When "
"using `data.table` functions in package code (R/* files) you need to use "
"the `data.table::` prefix because none of them are imported. When using "
"`data.table` in package tests (e.g. tests/testthat/test* files), you need "
"to declare `.datatable.aware=TRUE` in one of the R/* files."
msgstr ""
"Lorsque vous utilisez un package comme dépendance suggérée, vous ne devez "
"pas l'\"importer\" dans le fichier `NAMESPACE`. Mentionnez-le simplement "
"dans le fichier `DESCRIPTION`. Lorsque vous utilisez les fonctions `data."
"table` dans le code d'un package (fichiers R/*), vous devez utiliser le "
"préfixe `data.table::` car aucune d'entre elles n'est importée. Lorsque "
"vous utilisez `data.table` dans des paquets de tests (par exemple des "
"fichiers tests/testthat/test*), vous devez déclarer `.datatable.aware=TRUE` "
"dans l'un des fichiers R/*."

#: fr/datatable-importing.Rmd.tmp:block 50 (header)
msgid "`data.table` in `Imports` but nothing imported"
msgstr "`data.table` dans `Imports` mais rien d'importé"

#: fr/datatable-importing.Rmd.tmp:block 51 (paragraph)
msgid ""
"Some users ([e.g.](https://github.com/Rdatatable/data.table/issues/2341)) "
"may prefer to eschew using `importFrom` or `import` in their `NAMESPACE` "
"file and instead use `data.table::` qualification on all internal code (of "
"course keeping `data.table` under their `Imports:` in `DESCRIPTION`)."
msgstr ""
"Certains utilisateurs ([e.g.](https://github.com/Rdatatable/data.table/"
"issues/2341)) peuvent préférer éviter d'utiliser `importFrom` ou `import` "
"dans leur fichier `NAMESPACE` et utiliser à la place la syntaxe `data."
"table::` sur tout le code interne (en gardant bien sûr `data.table` sous "
"leurs `Imports:` dans `DESCRIPTION`)."

#: fr/datatable-importing.Rmd.tmp:block 52 (paragraph)
msgid ""
"In this case, the un-exported function `[.data.table` will revert to "
"calling `[.data.frame` as a safeguard since `data.table` has no way of "
"knowing that the parent package is aware it's attempting to make calls "
"against the syntax of `data.table`'s query API (which could lead to "
"unexpected behavior as the structure of calls to `[.data.frame` and `[.data."
"table` fundamentally differ, e.g. the latter has many more arguments)."
msgstr ""
"Dans ce cas, la fonction non exportée `[.data.table` reviendra à appeler `[."
"data.frame` comme filet de sécurité puisque `data.table` n'a aucun moyen de "
"savoir que le package parent est conscient qu'il tente de faire des appels "
"en utilisant la syntaxe de l'API de requête de `data.table` (ce qui "
"pourrait conduire à un comportement inattendu car la structure des appels à "
"`[.data.frame` et `[.data.table` diffère fondamentalement, par exemple, ce "
"dernier a beaucoup plus d'arguments)."

#: fr/datatable-importing.Rmd.tmp:block 53 (paragraph)
msgid ""
"If this is anyway your preferred approach to package development, please "
"define `.datatable.aware = TRUE` anywhere in your R source code (no need to "
"export). This tells `data.table` that you as a package developer have "
"designed your code to intentionally rely on `data.table` functionality even "
"though it may not be obvious from inspecting your `NAMESPACE` file."
msgstr ""
"Si c'est l'approche que vous préférez pour le développement de packages, "
"définissez `.datatable.aware = TRUE` n'importe où dans votre code source R "
"(pas besoin d'exporter). Cela indique à `data.table` que vous, en tant que "
"développeur du package, avez conçu votre code pour qu'il s'appuie "
"intentionnellement sur les fonctionnalités de `data.table`, même si cela "
"n'est pas évident en inspectant votre fichier `NAMESPACE`."

#: fr/datatable-importing.Rmd.tmp:block 54 (paragraph)
msgid ""
"`data.table` determines on the fly whether the calling function is aware "
"it's tapping into `data.table` with the internal `cedta` function "
"(**C**alling **E**nvironment is **D**ata **T**able **A**ware), which, "
"beyond checking the `?getNamespaceImports` for your package, also checks "
"the existence of this variable (among other things)."
msgstr ""
"`data.table` détermine à la volée si la fonction appelante est consciente "
"qu'elle puise dans `data.table` avec la fonction interne `cedta` "
"(**C**alling **E**nvironment is **D**ata **T**able **A**ware), qui, en plus "
"de vérifier le `?getNamespaceImports` de votre paquet, vérifie également "
"l'existence de cette variable (entre autres choses)."

#: fr/datatable-importing.Rmd.tmp:block 55 (header)
msgid "Further information on dependencies"
msgstr "Plus d'informations sur les dépendances"

#: fr/datatable-importing.Rmd.tmp:block 56 (paragraph)
msgid ""
"For more canonical documentation of defining packages dependency check the "
"official manual: [Writing R Extensions](https://cran.r-project.org/doc/"
"manuals/r-release/R-exts.html)."
msgstr ""
"Pour une documentation plus canonique sur la définition de la dépendance "
"des packages, consultez le manuel officiel : [Writing R Extensions](https://"
"cran.r-project.org/doc/manuals/r-release/R-exts.html)."

#: fr/datatable-importing.Rmd.tmp:block 57 (header)
msgid "Importing data.table C routines"
msgstr "Importation des routines C de data.table"

#: fr/datatable-importing.Rmd.tmp:block 58 (paragraph)
msgid ""
"Some of internally used C routines are now exported on C level thus can be "
"used in R packages directly from their C code. See [`?cdt`](https://"
"rdatatable.gitlab.io/data.table/reference/cdt.html) for details and "
"[Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-"
"exts.html) *Linking to native routines in other packages* section for usage."
msgstr ""
"Certaines routines C utilisées en interne sont maintenant exportées au "
"niveau C et peuvent donc être utilisées dans les packages R directement à "
"partir de leur code C. Voir [`?cdt`](https://rdatatable.gitlab.io/data."
"table/reference/cdt.html) pour les détails et [Writing R Extensions]"
"(https://cran.r-project.org/doc/manuals/r-release/R-exts.html) dans la "
"section *Linking to native routines in other packages* pour l'utilisation."

#: fr/datatable-importing.Rmd.tmp:block 59 (header)
msgid "Importing from non-r Applications {non-r-api}"
msgstr "Importation à partir d'applications non-r {#non-r-api}"

#: fr/datatable-importing.Rmd.tmp:block 60 (paragraph)
msgid ""
"Some tiny parts of `data.table` C code were isolated from the R C API and "
"can now be used from non-R applications by linking to .so / .dll files. "
"More concrete details about this will be provided later; for now you can "
"study the C code that was isolated from the R C API in [src/fread.c]"
"(https://github.com/Rdatatable/data.table/blob/master/src/fread.c) and [src/"
"fwrite.c](https://github.com/Rdatatable/data.table/blob/master/src/fwrite."
"c)."
msgstr ""
"Certaines petites parties du code C de `data.table` ont été isolées de "
"l'API C de R et peuvent maintenant être utilisées à partir d'applications "
"non-R en liant les fichiers .so / .dll. Des détails plus concrets seront "
"fournis ultérieurement ; pour l'instant, vous pouvez étudier le code C qui "
"a été isolé de l'API C de R dans [src/fread.c](https://github.com/"
"Rdatatable/data.table/blob/master/src/fread.c) et [src/fwrite.c](https://"
"github.com/Rdatatable/data.table/blob/master/src/fwrite.c)."

#: fr/datatable-importing.Rmd.tmp:block 61 (header)
msgid "How to convert your Depends dependency on data.table to Imports"
msgstr "Comment convertir votre dépendance à data.table de Depends à Imports"

#: fr/datatable-importing.Rmd.tmp:block 62 (paragraph)
msgid ""
"To convert a `Depends` dependency on `data.table` to an `Imports` "
"dependency in your package, follow these steps:"
msgstr ""
"Pour convertir une dépendance `Depends` sur `data.table` en une dépendance "
"`Imports` dans votre package, suivez ces étapes :"

#: fr/datatable-importing.Rmd.tmp:block 63 (header)
msgid "Step 0. Ensure your package is passing R CMD check initially"
msgstr ""
"Étape 0. S'assurer que votre package passe le contrôle R CMD dans un "
"premier temps"

#: fr/datatable-importing.Rmd.tmp:block 64 (header)
msgid ""
"Step 1. Update the DESCRIPTION file to put data.table in Imports, not "
"Depends"
msgstr ""
"Étape 1. Mettre à jour le fichier DESCRIPTION pour placer data.table dans "
"Imports, et non dans Depends"

#: fr/datatable-importing.Rmd.tmp:block 65 (paragraph)
msgid "**Before:**"
msgstr "**Avant :**"

#: fr/datatable-importing.Rmd.tmp:block 66 (code)
msgid ""
"Depends:\n"
"    R (>= 3.5.0),\n"
"    data.table\n"
"Imports:\n"
msgstr ""
"Depends:\n"
"    R (>= 3.5.0),\n"
"    data.table\n"
"Imports:\n"

#: fr/datatable-importing.Rmd.tmp:block 67 (paragraph)
msgid "**After:**"
msgstr "**Après :**"

#: fr/datatable-importing.Rmd.tmp:block 68 (code)
msgid ""
"Depends:\n"
"    R (>= 3.5.0)\n"
"Imports:\n"
"    data.table\n"
msgstr ""
"Depends:\n"
"    R (>= 3.5.0)\n"
"Imports:\n"
"    data.table\n"

#: fr/datatable-importing.Rmd.tmp:block 69 (header)
msgid "Step 2.1: Run `R CMD check`"
msgstr "Étape 2.1 : Exécuter `R CMD check`"

#: fr/datatable-importing.Rmd.tmp:block 70 (paragraph)
msgid ""
"Run `R CMD check` to identify any missing imports or symbols. This step "
"helps:"
msgstr ""
"Lancez `R CMD check` pour identifier tout import ou symbole manquant. Cette "
"étape aide à :"

#: fr/datatable-importing.Rmd.tmp:block 71 (paragraph)
msgid ""
"=====- Automatically detect any functions or symbols from `data.table` that "
"are not explicitly imported.===== =====- Flag missing special symbols like "
"`.N`, `.SD`, and `:=`.===== =====- Provide immediate feedback on what needs "
"to be added to the NAMESPACE file.====="
msgstr ""
"=====- Détecter automatiquement toutes les fonctions ou symboles de `data."
"table` qui ne sont pas explicitement importés.===== =====- Signaler les "
"symboles spéciaux manquants comme `.N`, `.SD`, et `:=`.===== =====- Fournir "
"immédiatement une information sur ce qui doit être ajouté au fichier "
"NAMESPACE.====="

#: fr/datatable-importing.Rmd.tmp:block 72 (paragraph)
msgid ""
"Note: Not all such usages are caught by `R CMD check`. In particular, `R "
"CMD check` skips some symbols/functions in formulas and will completely "
"miss parsed expressions like `parse(text = \"data.table(a = 1)\")`. "
"Packages will need good test coverage to detect these edge cases."
msgstr ""
"Note : Toutes ces utilisations ne sont pas prises en compte par `R CMD "
"check`. En particulier, `R CMD check` ne tient pas compte de certains "
"symboles/fonctions dans les formules et manquera complètement des "
"expressions analysées comme `parse(text = \"data.table(a = 1)\")`. Les "
"packages auront besoin d'une bonne couverture de test pour détecter ces cas "
"limites."

#: fr/datatable-importing.Rmd.tmp:block 73 (header)
msgid "Step 2.2: Modify the NAMESPACE file"
msgstr "Étape 2.2 : Modifier le fichier NAMESPACE"

#: fr/datatable-importing.Rmd.tmp:block 74 (paragraph)
msgid ""
"Based on the `R CMD check` results, ensure all used functions, special "
"symbols, S3 generics, and S4 classes from `data.table` are imported."
msgstr ""
"En se basant sur les résultats du `R CMD check`, s'assurer que toutes les "
"fonctions utilisées, les symboles spéciaux, les génériques S3, et les "
"classes S4 de `data.table` sont importés."

#: fr/datatable-importing.Rmd.tmp:block 75 (paragraph)
msgid ""
"That means adding `importFrom(data.table, ...)` directives for symbols, "
"functions, and S3 generics, and/or `importClassesFrom(data.table, ...)` "
"directives for S4 classes as appropriate. See 'Writing R Extensions' for "
"full details on how to do so properly."
msgstr ""
"Cela signifie qu'il faut ajouter les directives `importFrom(data."
"table, ...)` pour les symboles, les fonctions et les génériques S3, et/ou "
"les directives `importClassesFrom(data.table, ...)` pour les classes S4, "
"selon le cas. Voir 'Writing R Extensions' pour plus de détails sur la façon "
"de procéder."

#: fr/datatable-importing.Rmd.tmp:block 76 (header)
msgid "Blanket import"
msgstr "Importation complète"

#: fr/datatable-importing.Rmd.tmp:block 77 (paragraph)
msgid ""
"Alternatively, you can import all functions from `data.table` at once, "
"though this is generally not recommended:"
msgstr ""
"Vous pouvez également importer toutes les fonctions de `data.table` en une "
"seule fois, bien que cela ne soit généralement pas recommandé :"

#: fr/datatable-importing.Rmd.tmp:block 78 (code)
msgid "import(data.table)\n"
msgstr "import(data.table)\n"

#: fr/datatable-importing.Rmd.tmp:block 79 (paragraph)
msgid ""
"**Justification for Avoiding Blanket Imports:** =====1. **Documentation**: "
"The NAMESPACE file can serve as good documentation of how you depend on "
"certain packages.===== =====2. **Avoiding Conflicts**: Blanket imports "
"leave you open to subtle breakage. For example, if you `import(pkgA)` and "
"`import(pkgB)`, but later pkgB exports a function also exported by pkgA, "
"this will break your package due to conflicts in your namespace, which is "
"disallowed by `R CMD check` and CRAN.====="
msgstr ""
"**Justification Pour Eviter Les Importations Globales :** =====1. "
"**Documentation** : Le fichier NAMESPACE peut servir de bonne documentation "
"sur la façon dont vous dépendez de certains packages.===== =====2. **Éviter "
"Les Conflits** : Les importations générales vous exposent à des ruptures "
"subtiles. Par exemple, si vous importez deux packages avec `import(pkgA)` "
"et `import(pkgB)`, mais que plus tard pkgB exporte une fonction également "
"exportée par pkgA, cela cassera votre package à cause de conflits dans "
"votre espace de noms, ce qui est interdit par `R CMD check` et CRAN.====="

#: fr/datatable-importing.Rmd.tmp:block 80 (header)
msgid "Step 3: Update Your R code files outside the package's R/ directory"
msgstr ""
"Étape 3 : Mettre à jour vos fichiers de code R en dehors du répertoire R/ "
"du package"

#: fr/datatable-importing.Rmd.tmp:block 81 (paragraph)
msgid ""
"When you move a package from `Depends` to `Imports`, it will no longer be "
"automatically attached when your package is loaded. This can be important "
"for examples, tests, vignettes, and demos, where `Imports` packages need to "
"be attached explicitly."
msgstr ""
"Lorsque vous déplacez un package de `Depends` vers `Imports`, il ne sera "
"plus automatiquement attaché lorsque votre package sera chargé. Cela peut "
"être important pour les exemples, les tests, les vignettes et les démos, où "
"les packages `Imports` doivent être attachés explicitement."

#: fr/datatable-importing.Rmd.tmp:block 82 (paragraph)
msgid "**Before (with `Depends`):**"
msgstr "**Avant (avec `Depends`) :**"

#: fr/datatable-importing.Rmd.tmp:block 83 (code)
msgid ""
"# data.table functions are directly available\n"
"library(MyPkgDependsDataTable)\n"
"dt <- data.table(x = 1:10, y = letters[1:10])\n"
"setDT(dt)\n"
"result <- merge(dt, other_dt, by = \"x\")\n"
msgstr ""
"# les fonctions de data.table sont directement disponibles\n"
"library(MyPkgDependsDataTable)\n"
"dt <- data.table(x = 1:10, y = letters[1:10])\n"
"setDT(dt)\n"
"result <- merge(dt, other_dt, by = \"x\")\n"

#: fr/datatable-importing.Rmd.tmp:block 84 (paragraph)
msgid "**After (with `Imports`):**"
msgstr "**Après (avec `Imports`) :**"

#: fr/datatable-importing.Rmd.tmp:block 85 (code)
msgid ""
"# Explicitly load data.table in user scripts or vignettes\n"
"library(data.table)\n"
"library(MyPkgDependsDataTable)\n"
"dt <- data.table(x = 1:10, y = letters[1:10])\n"
"setDT(dt)\n"
"result <- merge(dt, other_dt, by = \"x\")\n"
msgstr ""
"# Charger explicitement data.table dans les scripts utilisateurs ou les "
"vignettes\n"
"library(data.table)\n"
"library(MyPkgDependsDataTable)\n"
"dt <- data.table(x = 1:10, y = letters[1:10])\n"
"setDT(dt)\n"
"result <- merge(dt, other_dt, by = \"x\")\n"

#: fr/datatable-importing.Rmd.tmp:block 86 (header)
msgid "Benefits of using `Imports`"
msgstr "Avantages de l'utilisation de `Imports`"

#: fr/datatable-importing.Rmd.tmp:block 87 (paragraph)
msgid ""
"=====- **User-Friendliness*: `Depends` alters your users' `search()` path, "
"possibly without their wanting to do so.===== =====- **Namespace "
"Management**: Only the functions your package explicitly imports are "
"available, reducing the risk of function name clashes.===== =====- "
"**Cleaner Package Loading**: Your package's dependencies are not attached "
"to the search path, making the loading process cleaner and potentially "
"faster.===== =====- **Easier Maintenance**: It simplifies maintenance tasks "
"as upstream dependencies' APIs evolve. Depending too much on `Depends` can "
"lead to conflicts and compatibility issues over time.====="
msgstr ""
"=====- **Convivialité** : `Depends` modifie le chemin `search()` de vos "
"utilisateurs, éventuellement sans qu'ils le veuillent.===== =====- "
"**Gestion de l'espace de noms** : Seules les fonctions que votre package "
"importe explicitement sont disponibles, ce qui réduit le risque de conflit "
"de noms de fonctions.===== =====- **Chargement de package plus propre** : "
"Les dépendances de votre package ne sont pas attachées au chemin de "
"recherche, ce qui rend le processus de chargement plus propre et "
"potentiellement plus rapide.===== =====- **Maintenance plus facile** : Cela "
"simplifie les tâches de maintenance au fur et à mesure que les API des "
"dépendances en amont évoluent. Trop dépendre de `Depends` peut conduire à "
"des conflits et des problèmes de compatibilité au fil du temps.====="
